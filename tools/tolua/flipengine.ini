# the prefix to be added to the generated functions. You might or might not use this in your own
# templates

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace

# extra arguments for clang

# what headers to parse

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

# for all class names, should we remove something when registering in the target VM?

# classes for which there will be no "parent" lookup

# base classes which will be skipped when their sub-classes found them.

# classes that create no constructor
# Set is special and we will use a hand-written constructor

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.


[flipengine]

prefix = flipengine_prefiex

target_namespace = 

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include
android_flags = -D_SIZE_T_DEFINED_ 

clang_headers = -I%(clangllvmdir)s/lib/clang/3.3/include 
clang_flags = -nostdinc -x c++ -std=c++11 -U __SSE__

project_headers = -I%(projectdir)s/Engine/include

extra_arguments = %(clang_headers)s %(android_headers)s %(project_headers)s %(clang_flags)s %(android_flags)s %(extra_flags)s
#extra_arguments = %(clang_headers)s %(android_headers)s %(project_headers)s $(extra_flags)s

cxxgenerator_headers = 

headers = %(projectdir)s/engine/glutils.h

classes = 

skip =

rename_functions = 

rename_classes = 

remove_prefix = 

classes_have_no_parents = Test

base_classes_to_skip = 

abstract_classes =

script_control_cpp = no
